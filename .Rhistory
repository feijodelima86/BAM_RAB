# filter out ICPMS QAQC
water_data <- water_all %>% filter(!grepl("^CCV", Sample.Id)) %>%
filter(!grepl("CCV$", Sample.Id)) %>%
filter(!grepl("^STD", Sample.Id)) %>%
filter(!grepl("^std", Sample.Id)) %>%
filter(!grepl("SP$", Sample.Id)) %>%
filter(!grepl("SPIKE$", Sample.Id)) %>%
filter(!grepl("LD$", Sample.Id)) %>%
filter(!grepl("LSP$", Sample.Id)) %>%
filter(!grepl("CAL BLANK", Sample.Id)) %>%
filter(!grepl("^Cal", Sample.Id)) %>%
filter(!grepl("cal", Sample.Id)) %>%
filter(!grepl("STD$", Sample.Id)) %>%
filter(!grepl("^ICV", Sample.Id)) %>%
filter(!grepl("ICV$", Sample.Id)) %>%
filter( !grepl("LFB", Sample.Id)) %>%
filter(!grepl("LBLANK", Sample.Id)) %>%
filter(!grepl("^LOW", Sample.Id)) %>%
filter(!grepl("^sac", Sample.Id)) %>%
filter(!grepl("^LLOQ", Sample.Id))
#filter out all QAQC
qaqcnames<- unique(water_QAQC$Sample.Id)
data <-  water_data %>% filter(!grepl("DBLANK", Sample.Id)) %>%
filter(!grepl("DB$", Sample.Id))%>%
filter(!grepl("T-239", Sample.Id)) %>%
filter(!grepl("239$", Sample.Id)) %>%
filter(!grepl("M-224", Sample.Id)) %>%
filter(!grepl("224$", Sample.Id)) %>%
filter( !grepl("BB$", Sample.Id)) %>%
filter( !grepl("FB$", Sample.Id)) %>%
filter( !grepl("LAB", Sample.Id)) %>%
filter(!grepl("MFB$",Sample.Id)) %>%
filter(!grepl("MFB",Sample.Id))
# some data was duplicated from int. std. reruns so remove duplicates
water_data <- data %>%
distinct(Sample.Id, .keep_all = TRUE)
###calculate MDLs using digestion blanks ----
summary(dblanks)
# Function to replace outliers with NAs based on z-score
replace_outliers_with_na <- function(x, threshold = 2) {
z_scores <- abs(scale(x))
x[z_scores > threshold] <- NA
return(x)
}
# Apply the function to each column in the data frame
for (col in colnames(dblanks[,c(2:ncol(dblanks))])) {
dblanks[[col]] <- replace_outliers_with_na(dblanks[[col]])
}
#DF is number of rows -1
#automate with R's quantile function and the number or rows in dataframe
tvalue <- qt(.99,df=(colSums(!is.na(dblanks[,2:34])))-1)
#standard deviation blanks across of all elements
blanks.stdev <- dblanks[,2:34] %>%
summarise_all(sd, na.rm = TRUE)
#mean of all elements
blanks.mean <- dblanks[,2:34] %>%
summarise_all(sd, na.rm = TRUE)
#rotate data frame to calc mdl
long.stdev <- pivot_longer(blanks.stdev,cols = everything(), names_to = "element", values_to = "stdev")
long.mean <- pivot_longer(blanks.mean,cols = everything(), names_to = "element", values_to = "mean")
#join
long.mdlcalc <- left_join(long.stdev,long.mean, by="element")
#calc mdl
calc.mdl <-long.mdlcalc %>%
mutate(mdl = stdev*tvalue)
#remove other mean and stdev
mdl <- calc.mdl[,c(1,4)]
#rotate dataframe back
mdl <- mdl %>%
pivot_wider(names_from = "element", values_from = "mdl")
### Censor data based on calculated MDL values ----
#chat gpt
process_samples <- function(SAMPLES, mdl) {
mutate_columns <- colnames(mdl)
for (col in mutate_columns) {
SAMPLES <- SAMPLES %>%
mutate(!!col := ifelse(.data[[col]] < mdl[[col]], 0.5 * mdl[[col]], .data[[col]]))
}
return(SAMPLES)
}
# Assuming you have SAMPLES and mdl data frames already defined
SAMPLES <- water_data
water.mdl <- process_samples(SAMPLES, mdl)
#### calculate true concentrations using sample mass and dilution volume----
#make data long form
water_long <- water.mdl %>% pivot_longer(cols= 2:34, names_to = "Element", values_to = "conc")
# 4.95 mL into 10mL, W samples diluted an extra 5x
water_correct <- water_long %>%
mutate(Concentration = ifelse(str_detect(Sample.Id, "W"), conc * ((10/4.95)*5), conc * (10/4.95)))
#filter out field dups
water_correct <- water_correct %>%
filter(!grepl("DUP",Sample.Id))
summary(water_correct)
## Save cleaned data----
write.csv(water_correct, file.path("./2_incremental","230731_Water_Metals_long_diff.csv"))
write.csv(water_QAQC, file.path("./2_incremental","230731_WaterQAQC_diff.csv"))
waterdata <- data.frame(read.csv("2_incremental/230731_Water_Metals_long_diff.csv"))
library(readr)
library(gbm)
library(dismo)
library(MASS)
library(usdm)
library(dplyr)
library(tidyr)
require(tidyverse)
library(stats)
library("ggplot2"); theme_set(theme_bw() +
theme(axis.line = element_line(color='black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()))
algaedata <- data.frame(read.csv("2_incremental/20220420_STANDING_CROP_Rafa_Interpolation_2.csv"))
waterdata <- data.frame(read.csv("2_incremental/230731_Water_Metals_long_diff.csv"))
turnoverdata <- read_csv("2_incremental/TURNOVER_REDUX.csv")
library(readr)
algaedata <- data.frame(read.csv("2_incremental/20220420_STANDING_CROP_Rafa_Interpolation_2.csv"))
waterdata <- data.frame(read.csv("2_incremental/230731_Water_Metals_long_diff.csv"))
turnoverdata <- read_csv("2_incremental/TURNOVER_REDUX.csv")
waterdata
names(algaedata)
algaedata$SAMPLING_DATE<-as.Date(algaedata$SAMPLING_DATE, format = "%m/%d/%Y")
algaedata<-algaedata[,-c(1,2)]
water_seperate <- water_correct %>%
# Separate the date, size, and site using str_extract
mutate(
date = str_extract(Sample.Id, "\\d+_\\d+_\\d+"),             # Extract date in the format: 6_21_21
filtersize = str_extract(Sample.Id, "(W|UF|F)"),                   # Extract size (W, UF, or F)
site = str_extract(Sample.Id, "(?<=_(W|UF|F)_)(\\d+)")       # Extract the site using lookbehind regex
) %>%
# Convert date to the actual date type using lubridate package
mutate(date = mdy(date))
water_seperate <- waterdata %>%
# Separate the date, size, and site using str_extract
mutate(
date = str_extract(Sample.Id, "\\d+_\\d+_\\d+"),             # Extract date in the format: 6_21_21
filtersize = str_extract(Sample.Id, "(W|UF|F)"),                   # Extract size (W, UF, or F)
site = str_extract(Sample.Id, "(?<=_(W|UF|F)_)(\\d+)")       # Extract the site using lookbehind regex
) %>%
# Convert date to the actual date type using lubridate package
mutate(date = mdy(date))
water_seperate
water_calc <- water_seperate %>%
pivot_wider(id_cols = c(site, date,Element),values_from = Concentration, names_from = filtersize)
water_calc
water_seperate
water_calc <- water_seperate %>%
pivot_wider(id_cols = c(site, date),values_from = Concentration, names_from = Element)
water_calc <- water_seperate %>%
pivot_wider(id_cols = c(site, date),values_from = Concentration, names_from = Element, values_fn = {summary_fun})
{data} %>%
dplyr::group_by(site, date, Element) %>%
dplyr::summarise(n = dplyr::n(), .groups = "drop") %>%
dplyr::filter(n > 1L)
water_calc <- water_seperate %>%
pivot_wider(id_cols = c(site, date),values_from = Concentration, names_from = filtersize, values_fn = avg)
water_calc <- water_seperate %>%
pivot_wider(id_cols = c(site, date),values_from = Concentration, names_from = filtersize, values_fn = mean)
water_calc
water_calc <- water_seperate %>%
pivot_wider(id_cols = c(site, date, Element),values_from = Concentration, names_from = filtersize, values_fn = mean)
water_calc
water_calc <- water_seperate %>%
pivot_wider(id_cols = c(site, date),values_from = Concentration, names_from = c(filtersize, Element), values_fn = mean)
water_calc
colnames(waterdata)[c(1:3)]<-c("SITE","SAMPLING_DATE")
colnames(waterdata)[c(1:2)]<-c("SITE","SAMPLING_DATE")
waterdata
colnames(water_calc)[c(1:2)]<-c("SITE","SAMPLING_DATE")
water_calc
waterdata$SITE <- factor(waterdata$SITE, labels = c("WS","DL","GR","GC","BG","BN"))
water_calc$SITE <- factor(water_calc$SITE, labels = c("WS","DL","GR","GC","BG","BN"))
water_calc
water_seperate
water_seperate <- waterdata %>%
# Separate the date, size, and site using str_extract
mutate(
date = str_extract(Sample.Id, "\\d+_\\d+_\\d+"),             # Extract date in the format: 6_21_21
filtersize = str_extract(Sample.Id, "(W|UF|F)"),                   # Extract size (W, UF, or F)
site = str_extract(Sample.Id, "(?<=_(W|UF|F)_)(\\d+)")       # Extract the site using lookbehind regex
) %>%
# Convert date to the actual date type using lubridate package
mutate(date = mdy(date))
waterdata <- data.frame(read.csv("2_incremental/230731_Water_Metals_long_diff.csv"))
water_seperate <- waterdata %>%
# Separate the date, size, and site using str_extract
mutate(
date = str_extract(Sample.Id, "\\d+_\\d+_\\d+"),             # Extract date in the format: 6_21_21
filtersize = str_extract(Sample.Id, "(W|UF|F)"),                   # Extract size (W, UF, or F)
site = str_extract(Sample.Id, "(?<=_(W|UF|F)_)(\\d+)")       # Extract the site using lookbehind regex
) %>%
# Convert date to the actual date type using lubridate package
mutate(date = mdy(date))
water_calc <- water_seperate %>%
pivot_wider(id_cols = c(site, date),values_from = Concentration, names_from = c(filtersize, Element), values_fn = mean)
water_calc
colnames(water_calc)[c(1:2)]<-c("SITE","SAMPLING_DATE")
factor(water_calc$SITE)
factor(water_calc$SITE, labels = c("WS","DL","GR","GC","BG","BN"))
water_calc$SITE <- factor(water_calc$SITE, labels = c("WS","BG","BN","DL","GR","GC"))
water_calc
waterdata$SAMPLING_DATE<-as.Date(waterdata$SAMPLING_DATE, format = "%m/%d/%Y")
water_calc$SAMPLING_DATE<-as.Date(water_calc$SAMPLING_DATE, format = "%m/%d/%Y")
water_calc
water_calc<-data.frame(water_calc)
water_calc
colnames(water_calc)
water_calc[,c(1,2,6,13,19,20,23,29,31,33,35)]
colnames(water_calc)
6+1*36
1*36+4
1*36+3
1*34+6
1*36+35
1*34+6
1*34+13
1*34+19
1*34+20
1*34+23
1*34+29
1*34+31
1*34+33
1*34+35
colnames(water_calc)
1*34+13
waterdata
water_calc
water_calc[,c(1,2,6,13,19,20,23,29,31,33,35)]
colnames(water_calc)
1*34+6
1*34+4
1*34+5
1*34+12
1*34+18
1*34+13
1*33+6
1*33+6
1*33+13
1*33+18
water_calc
water_calc[,c(1,2,6,13,19,20,23,29,31,33,35)]
colnames(water_calc)
1*33+20
1*33+19
1*33+23
1*33+20
1*33+23
1*33+29
1*33+31
1*33+33
1*33+35
1*33+6
1*33+13
1*33+13
1*33+13
1*33+19
1*33+23
1*33+23
1*33+29
1*33+29
1*33+31
1*33+23
1*33+29
1*33+31
1*33+33
1*33+33
1*33+35
waterdata<-water_calc[,c(1,2,6,13,19,20,23,29,31,33,35,39,46,52,56,62,64,66,68)]
names(waterdata)
1*33+19
1*33+6
1*33+13
1*33+19
colnames(water_calc)
1*33+19
1*33+20
waterdata<-water_calc[,c(1,2,6,13,19,20,23,29,31,33,35,39,46,52,53,56,62,64,66,68)]
names(waterdata)
2*33+6
2*33+13
2*33+13
2*33+19
2*33+20
2*33+23
2*33+29
2*33+31
2*33+23
2*33+29
2*33+31
2*33+33
2*33+35
names(turnoverdata)
waterdata<-water_calc[,c(1,2,6,13,19,20,23,29,31,33,35,39,46,52,53,56,62,64,66,68,72,79,85,86,89,95,97,99,101)]
names(waterdata)
names(turnoverdata)
turnoverdata$SAMPLING_DATE<-as.Date(turnoverdata$SAMPLING_DATE, format = "%m/%d/%Y")
add.comp<-list(algaedata,waterdata,turnoverdata)
alldata<-add.comp %>% reduce(full_join)
COMPARTMENTS_AVG <-aggregate(x = alldata[,colnames(alldata) != c("SAMPLING_DATE","SITE","SAMPLE_DESCRIPTOR")],
by = list(alldata$SAMPLING_DATE,alldata$SITE,alldata$SAMPLE_DESCRIPTOR),
FUN = mean,
na.rm = T)
COMPARTMENTS_AVG
algaedata$SAMPLING_DATE
SAMPLING_DATE
water_calc$SAMPLING_DATE
factor(water_calc$SAMPLING_DATE)
waterdata
factor(waterdata$SAMPLING_DATE)
factor(algaedata$SAMPLING_DATE)
factor(waterdata$SAMPLING_DATE)
factor(waterdata$SAMPLING_DATE, labels = c("2021-06-21", "2021-07-07", "2021-07-20", "2021-08-03", "2021-08-17", "2021-08-30", "2021-09-09", "2021-09-22", "2021-10-13"))
waterdata$SAMPLING_DATE<-as.date(factor(waterdata$SAMPLING_DATE, labels = c("2021-06-21", "2021-07-07", "2021-07-20", "2021-08-03", "2021-08-17", "2021-08-30", "2021-09-09", "2021-09-22", "2021-10-13")))
waterdata$SAMPLING_DATE<-as.Date(factor(waterdata$SAMPLING_DATE, labels = c("2021-06-21", "2021-07-07", "2021-07-20", "2021-08-03", "2021-08-17", "2021-08-30", "2021-09-09", "2021-09-22", "2021-10-13")))
waterdata$SAMPLING_DATE
factor(algaedata$SAMPLING_DATE)
names(turnoverdata)
turnoverdata$SAMPLING_DATE<-as.Date(turnoverdata$SAMPLING_DATE, format = "%m/%d/%Y")
add.comp<-list(algaedata,waterdata,turnoverdata)
alldata<-add.comp %>% reduce(full_join)
COMPARTMENTS_AVG <-aggregate(x = alldata[,colnames(alldata) != c("SAMPLING_DATE","SITE","SAMPLE_DESCRIPTOR")],
by = list(alldata$SAMPLING_DATE,alldata$SITE,alldata$SAMPLE_DESCRIPTOR),
FUN = mean,
na.rm = T)
COMPARTMENTS_AVG
names(COMPARTMENTS_AVG)
colnames(COMPARTMENTS_AVG)[c(1:3)]<-c("SAMPLING_DATE","SITE","SAMPLE_DESCRIPTOR")
write.csv(COMPARTMENTS_AVG, "2_incremental/TURNOVER_Full_Dataset.csv")
library(readr)
algaedata <- data.frame(read.csv("2_incremental/20220420_STANDING_CROP_Rafa_Interpolation_2.csv"))
waterdata <- data.frame(read.csv("2_incremental/230731_Water_Metals_long_diff.csv"))
turnoverdata <- read_csv("2_incremental/TURNOVER_REDUX.csv")
### prepping algae data ###
names(algaedata)
algaedata$SAMPLING_DATE<-as.Date(algaedata$SAMPLING_DATE, format = "%m/%d/%Y")
algaedata<-algaedata[,-c(1,2)]
### prepping water data ###
names(waterdata)
water_seperate <- waterdata %>%
# Separate the date, size, and site using str_extract
mutate(
date = str_extract(Sample.Id, "\\d+_\\d+_\\d+"),             # Extract date in the format: 6_21_21
filtersize = str_extract(Sample.Id, "(W|UF|F)"),                   # Extract size (W, UF, or F)
site = str_extract(Sample.Id, "(?<=_(W|UF|F)_)(\\d+)")       # Extract the site using lookbehind regex
) %>%
# Convert date to the actual date type using lubridate package
mutate(date = mdy(date))
water_calc <- water_seperate %>%
pivot_wider(id_cols = c(site, date),values_from = Concentration, names_from = c(filtersize, Element), values_fn = mean)
colnames(water_calc)[c(1:2)]<-c("SITE","SAMPLING_DATE")
water_calc$SITE <- factor(water_calc$SITE, labels = c("WS","BG","BN","DL","GR","GC"))
water_calc$SAMPLING_DATE<-as.Date(water_calc$SAMPLING_DATE, format = "%m/%d/%Y")
water_calc<-data.frame(water_calc)
colnames(water_calc)
waterdata<-water_calc[,c(1,2,6,13,19,20,23,29,31,33,35,39,46,52,53,56,62,64,66,68,72,79,85,86,89,95,97,99,101)]
waterdata
factor(waterdata$SAMPLING_DATE)
View(waterdata)
View(waterdata)
waterdata <- data.frame(read.csv("2_incremental/230731_Water_Metals_long_diff.csv"))
View(waterdata)
waterdata <- data.frame(read.csv("2_incremental/230731_Water_Metals_long_diff.csv"))
names(algaedata)
algaedata$SAMPLING_DATE<-as.Date(algaedata$SAMPLING_DATE, format = "%m/%d/%Y")
algaedata<-algaedata[,-c(1,2)]
names(waterdata)
water_seperate <- waterdata %>%
# Separate the date, size, and site using str_extract
mutate(
date = str_extract(Sample.Id, "\\d+_\\d+_\\d+"),             # Extract date in the format: 6_21_21
filtersize = str_extract(Sample.Id, "(W|UF|F)"),                   # Extract size (W, UF, or F)
site = str_extract(Sample.Id, "(?<=_(W|UF|F)_)(\\d+)")       # Extract the site using lookbehind regex
) %>%
# Convert date to the actual date type using lubridate package
mutate(date = mdy(date))
water_seperate
View(water_seperate)
water_calc <- water_seperate %>%
pivot_wider(id_cols = c(site, date),values_from = Concentration, names_from = c(filtersize, Element), values_fn = mean)
water_calc
View(water_calc)
## Script for processing water samples during the BAMRAB time period
#install and load packages
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(lubridate)
options(scipen=100)
# check sesion info for reporting
sessionInfo()
#writing micron
x <- "\u00b5"
x
#load data and clean ----
water1 <- read.csv(file.path("./0_data/icp_ms_internal","230516_BAMRAB1REPRO1.csv"), header=T, na.strings = c(""))
water1.2 <- read.csv(file.path("./0_data/icp_ms_internal","230516_BAMRAB1REPROend.csv"), header=T, na.strings = c(""))
water2 <- read.csv(file.path("./0_data/icp_ms_internal","230608_BAMRABrun2.1.csv"), header=T, na.strings = c(""))
water2.2 <- read.csv(file.path("./0_data/icp_ms_internal","230609_BAMRAB2.2.csv"), header=T, na.strings = c(""))
water3 <- read.csv(file.path("./0_data/icp_ms_internal","230616_BAMRAB3.1.csv"), header=T, na.strings = c(""))
# load sample info
#sampleinfo <- read.csv(file.path("./0_data","SampleInfo.csv"), header=T, na.strings = c(""))
#remove rows that we do not want to use (rerun needed or a split reprocess)
see <- water1[c(1:127),]
water1 <- water1[c(1:177),]
water1.2 <- water1.2[c(119:151),]
water2 <- water2[c(15:132),]
water2.2 <- water2.2[c(152:293),]
#remove rows that failed anlaysis
#water1= water1 %>% filter(QC.Status == "Passed")
#this dataset has failed values that we want
#select sample id column and columns that are elements
water1 <- water1 %>% select(c(Sample.Id, contains("ppb.")))
#install and load packages
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(lubridate)
options(scipen=100)
# check sesion info for reporting
sessionInfo()
#writing micron
x <- "\u00b5"
x
water1 <- read.csv(file.path("./0_data/icp_ms_internal","230516_BAMRAB1REPRO1.csv"), header=T, na.strings = c(""))
water1.2 <- read.csv(file.path("./0_data/icp_ms_internal","230516_BAMRAB1REPROend.csv"), header=T, na.strings = c(""))
water2 <- read.csv(file.path("./0_data/icp_ms_internal","230608_BAMRABrun2.1.csv"), header=T, na.strings = c(""))
water2.2 <- read.csv(file.path("./0_data/icp_ms_internal","230609_BAMRAB2.2.csv"), header=T, na.strings = c(""))
water3 <- read.csv(file.path("./0_data/icp_ms_internal","230616_BAMRAB3.1.csv"), header=T, na.strings = c(""))
see <- water1[c(1:127),]
water1 <- water1[c(1:177),]
water1.2 <- water1.2[c(119:151),]
water2 <- water2[c(15:132),]
water2.2 <- water2.2[c(152:293),]
water1 <- water1 %>% select(c(Sample.Id, contains("ppb.")))
water1.2 <- water1.2 %>% select(c(Sample.Id, contains("ppb.")))
water2 <- water2 %>% select(c(Sample.Id, contains("ppb.")))
water2.2 <- water2.2 %>% select(c(Sample.Id, contains("ppb.")))
water3 <- water3 %>% select(c(Sample.Id, contains("ppb.")))
water2names <- colnames(water2)
water1 <- water1 %>% select(any_of(water2names))
water1.2 <- water1.2 %>% select(any_of(water2names))
#bind data frames together
water1 <- rbind(water1, water1.2 )
water2 <- rbind(water2, water2.2)
water2 <-water2[,c(1:3,5:36)] #remove Al std mode
water <- rbind(water1, water2)
water <- water[,c(1:21,23:35)] #remove Rh oshift
water3 <- water3[c(1:105, 108:235),] # T-239s that were labeled incorectly as Dblanks
names <- colnames(water)
print(names)
#rename columns for water1
water_names <- water %>% rename( c(Ca = starts_with("Ca"),Mg = starts_with("Mg"),Al = starts_with("Al"), S = starts_with("S."),P = starts_with("P."),K = starts_with("K"),Na = starts_with("Na"), V = starts_with("V"),Cr_KED =starts_with("Cr..52"),Cr_NH3 = starts_with("Cr..53"),Fe_NH3 = starts_with("Fe..54"),Mn = starts_with("Mn"),Fe_KED = starts_with("Fe..56"),Co = starts_with("Co"),Ni = starts_with("Ni"),Cu_KED = starts_with("Cu..63"),Cu_NH3 = starts_with("Cu..65"),Zn = starts_with("Zn"),As_STD = starts_with("As.75"),As_KED = starts_with("As.KED"),As_Oshift = starts_with("As.Oshift"),Se77_Oshift = starts_with("Se..77..Oshift"),Se78_Oshift = starts_with("Se..78..Oshift"),Se80_Oshift = starts_with("Se..80..Oshift"),Se82_Oshift = starts_with("Se..82..Oshift"),Se77_Oshift = starts_with("Se..77..Oshift"),Mo_NH3 = starts_with("Mo..95..NH3"),Mo_Oshift = starts_with("Mo..95..Oshift"),Cd111 = starts_with("Cd..111"),Cd114 = starts_with("Cd..114"),Pb_STD = starts_with("Pb.208"),Pb_NH3 = starts_with("Pb.NH3")))
## Script for processing water samples during the BAMRAB time period
#install and load packages
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(lubridate)
options(scipen=100)
# check sesion info for reporting
sessionInfo()
#writing micron
x <- "\u00b5"
x
water1 <- read.csv(file.path("./0_data/icp_ms_internal","230516_BAMRAB1REPRO1.csv"), header=T, na.strings = c(""))
water1
water1.2
see <- water1[c(1:127),]
water1 <- water1[c(1:177),]
water1.2 <- water1.2[c(119:151),]
water2 <- water2[c(15:132),]
water2.2 <- water2.2[c(152:293),]
water1 <- water1 %>% select(c(Sample.Id, contains("ppb.")))
water3 <- water3 %>% select(c(Sample.Id, contains("ppb.")))
water2names
water2
water2names <- colnames(water2)
water1 <- water1 %>% select(any_of(water2names))
any_of(water2names)
#bind data frames together
water1 <- rbind(water1, water1.2 )
water2 <- rbind(water2, water2.2)
water2 <-water2[,c(1:3,5:36)] #remove Al std mode
## Script for processing water samples during the BAMRAB time period
#install and load packages
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(lubridate)
options(scipen=100)
# check sesion info for reporting
sessionInfo()
#writing micron
x <- "\u00b5"
x
#load data and clean ----
water1 <- read.csv(file.path("./0_data/icp_ms_internal","230516_BAMRAB1REPRO1.csv"), header=T, na.strings = c(""))
water1.2 <- read.csv(file.path("./0_data/icp_ms_internal","230516_BAMRAB1REPROend.csv"), header=T, na.strings = c(""))
water2 <- read.csv(file.path("./0_data/icp_ms_internal","230608_BAMRABrun2.1.csv"), header=T, na.strings = c(""))
water2.2 <- read.csv(file.path("./0_data/icp_ms_internal","230609_BAMRAB2.2.csv"), header=T, na.strings = c(""))
water3 <- read.csv(file.path("./0_data/icp_ms_internal","230616_BAMRAB3.1.csv"), header=T, na.strings = c(""))
# load sample info
#sampleinfo <- read.csv(file.path("./0_data","SampleInfo.csv"), header=T, na.strings = c(""))
#remove rows that we do not want to use (rerun needed or a split reprocess)
water1 <- water1[c(1:177),]
water1.2 <- water1.2[c(119:151),]
water2 <- water2[c(15:132),]
water2.2 <- water2.2[c(152:293),]
#remove rows that failed anlaysis
#water1= water1 %>% filter(QC.Status == "Passed")
#this dataset has failed values that we want
#select sample id column and columns that are elements
water1 <- water1 %>% select(c(Sample.Id, contains("ppb.")))
